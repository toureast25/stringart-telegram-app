<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Обработка изображения</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    .image-container {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-bottom: 20px;
    }
    canvas {
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
      max-width: 100%;
    }
    .controls {
      margin-bottom: 20px;
    }
    .palette {
      display: flex;
      gap: 10px;
      margin-top: 10px;
      flex-wrap: wrap;
    }
    .color-box {
      width: 60px;
      height: 60px;
      border-radius: 8px;
      border: 1px solid #333;
      display: flex;
      justify-content: center;
      align-items: flex-end;
      font-size: 10px;
      color: white;
      text-shadow: 0 0 3px black;
    }
  </style>
</head>
<body>

  <h2>1) Изображение</h2>
  <div class="image-container">
    <canvas id="canvas"></canvas>
  </div>

  <div class="controls">
    <label>Ширина (px): 
      <input type="range" id="widthRange" min="100" max="1000" value="600">
      <input type="number" id="widthInput" min="100" max="1000" value="600">
    </label>
    <br>
    <label>Размытие (px): 
      <input type="range" id="blurRange" min="0" max="50" value="5">
      <input type="number" id="blurInput" min="0" max="50" value="5">
    </label>
  </div>

  <h2>3) Палитра</h2>
  <label for="colorCount">Количество цветов:</label>
  <select id="colorCount">
    <option value="3">3</option>
    <option value="6" selected>6</option>
    <option value="9">9</option>
    <option value="12">12</option>
  </select>
  <br>
  <label for="minDeltaE">Минимальная разница (ΔE):</label>
  <input type="number" id="minDeltaE" min="1" max="100" value="20">
  <div class="palette" id="palette"></div>

  <script>
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    const img = new Image();
    img.src = "test.png"; // тут твой файл
    img.onload = () => {
      drawImage();
      extractPalette();
    };

    // Управление шириной
    const widthRange = document.getElementById("widthRange");
    const widthInput = document.getElementById("widthInput");
    const blurRange = document.getElementById("blurRange");
    const blurInput = document.getElementById("blurInput");
    const colorCount = document.getElementById("colorCount");
    const minDeltaEInput = document.getElementById("minDeltaE");
    const paletteDiv = document.getElementById("palette");

    function syncWidth(val) {
      widthRange.value = val;
      widthInput.value = val;
      drawImage();
      extractPalette();
    }
    function syncBlur(val) {
      blurRange.value = val;
      blurInput.value = val;
      drawImage();
      extractPalette();
    }

    widthRange.oninput = e => syncWidth(e.target.value);
    widthInput.oninput = e => syncWidth(e.target.value);
    blurRange.oninput = e => syncBlur(e.target.value);
    blurInput.oninput = e => syncBlur(e.target.value);
    colorCount.onchange = extractPalette;
    minDeltaEInput.oninput = extractPalette;

    function drawImage() {
      const targetWidth = parseInt(widthInput.value, 10);
      const scale = targetWidth / img.width;
      const targetHeight = img.height * scale;

      canvas.width = targetWidth;
      canvas.height = targetHeight;

      ctx.filter = `blur(${blurInput.value}px)`;
      ctx.drawImage(img, 0, 0, targetWidth, targetHeight);
    }

    // ---------- Цветовые преобразования ----------
    function rgbToLab(r, g, b) {
      function pivot(n) {
        return n > 0.008856 ? Math.pow(n, 1/3) : (7.787 * n) + (16/116);
      }
      r /= 255; g /= 255; b /= 255;
      r = r > 0.04045 ? Math.pow((r+0.055)/1.055, 2.4) : r/12.92;
      g = g > 0.04045 ? Math.pow((g+0.055)/1.055, 2.4) : g/12.92;
      b = b > 0.04045 ? Math.pow((b+0.055)/1.055, 2.4) : b/12.92;

      let x = (r*0.4124 + g*0.3576 + b*0.1805) / 0.95047;
      let y = (r*0.2126 + g*0.7152 + b*0.0722) / 1.00000;
      let z = (r*0.0193 + g*0.1192 + b*0.9505) / 1.08883;

      x = pivot(x); y = pivot(y); z = pivot(z);

      return [
        (116 * y) - 16,
        500 * (x - y),
        200 * (y - z)
      ];
    }

    function deltaE(labA, labB) {
      return Math.sqrt(
        Math.pow(labA[0] - labB[0], 2) +
        Math.pow(labA[1] - labB[1], 2) +
        Math.pow(labA[2] - labB[2], 2)
      );
    }

    function filterColorsByDeltaE(colors, minDeltaE) {
      let result = [];
      colors.forEach(c => {
        let lab = rgbToLab(c[0], c[1], c[2]);
        if (!result.some(r => deltaE(lab, rgbToLab(r[0], r[1], r[2])) < minDeltaE)) {
          result.push(c);
        }
      });
      return result;
    }

    function extractPalette() {
      const count = parseInt(colorCount.value, 10);
      const minDeltaE = parseInt(minDeltaEInput.value, 10);

      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const data = imageData.data;

      let colors = [];
      for (let i = 0; i < data.length; i += 40*4) { // выборочно, чтобы ускорить
        let r = data[i], g = data[i+1], b = data[i+2];
        colors.push([r,g,b]);
      }

      // простая сортировка по частоте
      let map = {};
      colors.forEach(c => {
        let key = c.join(",");
        map[key] = (map[key]||0)+1;
      });
      let sorted = Object.entries(map).sort((a,b)=>b[1]-a[1]).map(e=>e[0].split(",").map(Number));

      let filtered = filterColorsByDeltaE(sorted, minDeltaE).slice(0,count);

      paletteDiv.innerHTML = "";
      filtered.forEach(c=>{
        let hex = "#"+c.map(x=>x.toString(16).padStart(2,"0")).join("");
        let box = document.createElement("div");
        box.className="color-box";
        box.style.background = hex;
        box.textContent = hex;
        paletteDiv.appendChild(box);
      });
    }
  </script>
</body>
</html>
